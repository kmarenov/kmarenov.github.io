---
layout: post
title:  "Vagrant для веб-разработчика"
date:   2016-01-01 18:43:15
categories: 
---

## Содержание
- [Введение](#intro)
- [Установка и настройка](#install)
- [Что дальше](#next)

## <a name="intro"></a> Введение
В этой статье речь пойдет о замечательном инструменте, который называется `Vagrant`, и о том, чем он может быть полезен для веб-разработчика. 

Каждый разработчик в процессе разработки веб-приложений сталкивается с необходимостью настройки на своем компьютере окружения, необходимого для их запуска. В состав окружения могут входить, например: PHP, MySQL, PostgreSQL, Apache, nginx, а также другие СУБД, веб-сервера и т. д.

Есть разные способы управления окружениями: кто-то вручную устанавливает и настраивает в системе по-отдельности каждый из необходимых компонентов, кто-то использует готовые наборы (например XAMPP, Open Server в Windows или lamp-server в Linux), но у этих подходов есть несколько недостатков, главный из которых заключается в трудности поддержки разных окружений для разных проектов. Нередко возникают ситуации, когда, например, разные проекты работают с разными версиями PHP, или им нужны разные настройки php.ini, или разные веб-сервера и т. д. В таких случаях управление окружениями становится довольно трудоемкой задачей, решить которую человеку, не имеющему квалификации сисадмина, бывает весьма непросто. В добавок - операционная система компьютера "обрастает" большим количеством разного софта, который зачастую нужен только для того что-бы запустить локально какое-то одно веб-приложение. 

Я пользуюсь Vagrant для управления окружениями, и вот почему:

* Vagrant использует виртуализацию, а это в свою очередь дает следующие преимущества:

    * Для каждого проекта имеется индивидуальное окружение со своей версией PHP, своими настройками php.ini, веб-сервером и т. д., то есть - полностью изолированная виртуальная машина.

    * Операционная система компьютера не "засоряется" различным программным обеспечением, которое, по большому счету, в ней не нужно.

* Vagrant на лету синхронизирует каталог проекта с каталогом внутри виртуальной машины. Не нужно заботиться об обновлении версий файлов внутри нее. Все происходит автоматически и мгновенно.

* Управление окружением производится минимальным набором простых команд. В самом простом случае работа с Vagrant сводится к двум командам: `vagrant up` (запуск) и `vagrant halt` (остановка). 


Vagrant является оберткой над ПО виртуализации (VirtualBox, VMware и др.) и средствами управления конфигурациями (Chef, Salt, Puppet), и предоставляет способ легко и быстро всем этим управлять.

## <a name="install"></a> Установка и настройка

Рассмотрим по шагам процесс установки Vagrant, а также развернем для примера [готовый образ](https://box.scotch.io/) (или, как принято говорить в терминологии Vagrant - бокс), содержащий предустановленное программное обеспечение, необходимое для веб-разработки, в том числе LAMP-стек, и запустим в получившимся окружении веб-приложение (возьмем для примера [Yii 2 Basic Application Template](https://github.com/yiisoft/yii2-app-basic)).

Я использую Linux Mint, которая основана на Ubuntu, поэтому все описанные манипуляции применимы в этих ОС. К сожалению, я не знаю, насколько стабильно все будет работать в Windows, однако все описанное ПО имеет версии для Windows, поэтому, надо полагать, там тоже все должно работать.

Итак, поехали.

### Установка VirtualBox
Так как Vagrant оперирует виртуальными машинами, то ему для работы необходимо ПО виртуализации. Установим VirtualBox, который является широко распространенным, удобным и простым в использовании примером такого ПО.
Для установки следуйте инструкциям со страницы:
[https://www.virtualbox.org/wiki/Linux_Downloads](https://www.virtualbox.org/wiki/Linux_Downloads)

### Установка Vagrant
Затем установим сам Vagrant.

Для установки выполните:
{% highlight bash %}
$ sudo apt-get install vagrant
{% endhighlight %}

Или скачайте и установите последнюю версию отсюда:
[https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)

### Установка плагинов Vagrant
Рекомендую установить пару полезных плагинов для Vagrant.

Плагин `vbguest` нужен на тот случай, когда версии VirtualBox Guest Additions внутри виртуальной машины и на вашем компьютере различаются, он сам в автоматическом режиме разрешит данную проблему. Для установки выполним:
{% highlight bash %}
$ vagrant plugin install vagrant-vbguest
{% endhighlight %}

Плагин `hostmanager` нужен для того, чтобы Vagrant мог управлять именами хостов для виртуальных машин. Установим его:
{% highlight bash %}
$ vagrant plugin install vagrant-hostmanager
{% endhighlight %}

### Загрузка файла конфигурации для Vagrant
Как уже говорилось выше, мы будем разворачивать уже готовое сконфигурированное окружение - [Scotch Box](https://box.scotch.io/).
В репозитории Scotch Box находится конфигурационный файл `Vagrantfile`, который содержит всю необходимую Vagrant информацию для развертывания и запуска окружения.
Скачаем репозиторий:
{% highlight bash %}
$ git clone https://github.com/scotch-io/scotch-box.git
{% endhighlight %}

### Развертывание и запуск окружения
Для того, чтобы Vagrant развернул и запустил окружение, необходимо выполнить в каталоге проекта, то есть там, где находится файл `Vagrantfile`, единственную команду - `vagrant up`.

Перейдем в каталог, куда мы скачали репозитоий Scotch Box и сделаем это.
{% highlight bash %}
$ cd scotch-box
$ vagrant up
{% endhighlight %}

Это на самом деле все, что нужно сделать. Первый запуск обычно занимает довольно длительное время, так как Vagrant должен скачать и развернуть образ виртуальной машины, разрешить конфликт версий VirtualBox Guest Additions, если он есть, а также установить, при необходимости, различное программное обеспечение внутри виртуальной машины. Второй и последующие запуски будут осуществляться за считанные секунды.

Scotch Box по-умолчанию использует адрес [http://192.168.33.10/](http://192.168.33.10/). После того, как выполнится команда `vagrant up`, перейдите в своем браузере по этому адресу и убедитесь, что все работает.
![Scotch Box](/assets/vagrant/01.png)

Если вы хотите остановить виртуальную машину, выполните команду `vagrant halt`.

Если вы используете режим гибернации, то перед тем, как переводить в него машину, рекомендуется выполнить для запущенного окружения команду `vagrant suspend`, так как в противном случае ОС может "зависнуть" при переходе в гибернацию. После выхода из режима гибернации запустите окружение, снова выполнив `vagrant up`. 

### Демонстрация работы
Как и говорилось выше, продемонстрируем работу окружения на примере приложения [Yii 2 Basic Application Template](https://github.com/yiisoft/yii2-app-basic).

Подразумевается, что у вас в системе уже установлены php и composer. Если это не так, то установите их. В рамках этой статьи не рассматривается процесс их установки.

Для корректной установки Yii 2 Basic Application Template необходимо наличие в системе `fxp/composer-asset-plugin`, который composer использует для управления зависимостями Bower и npm. Установим его:
{% highlight bash %}
$ composer global require "fxp/composer-asset-plugin"
{% endhighlight %}

Теперь перейдем в каталог `public`, который в Scotch Box является корневым каталогом веб-сервера, удалим файл index.php и установим в этот каталог Yii 2 Basic Application Template.
{% highlight bash %}
$ cd public
$ rm index.php
$ composer create-project --prefer-dist yiisoft/yii2-app-basic .
{% endhighlight %}

После того, как composer установит приложение, перейдите по адресу [http://192.168.33.10/web/](http://192.168.33.10/web/), чтобы убедиться, что приложение работает.
![Yii](/assets/vagrant/02.png)

Обратите внимание на то, что все изменения файловой системы внутри каталога public мгновенно перенеслись внутрь виртуальной машины без необходимости производить какие-либо дополнительные манипуляции. Все работает прозрачно - так, будто никакой виртуальной машины нет вообще: вы меняете файлы, открываете url в браузере и наблюдаете изменения.

